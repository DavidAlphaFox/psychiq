#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(ql:quickload '(:redqing :uiop) :silent t)

(defun starts-with (x starts)
  (and (<= (length starts) (length x))
       (string= x starts :end1 (length starts))))

(defun parse-args (args)
  (let (new-args)
    (flet ((add-option (k v)
             (setf new-args (nconc new-args (list k v)))))
      (loop with queues = ()
            for option = (pop args)
            for value = (pop args)
            while option
            if (string-equal option "--host") do
              (add-option :host value)
            else if (string-equal option "--port") do
              (add-option :port (parse-integer value))
            else if (string-equal option "--queue") do
              (push value queues)
            else if (string-equal option "--concurrency") do
              (add-option :concurrency (parse-integer value))
            else
              do (error "Invalid option: ~A" option)
            finally
               (when queues
                 (add-option :queue queues))))
    new-args))

(defun print-usage ()
  (format t "~&Usage: redqing [option...]

Options:
    --host HOST           Redis server host
    --port PORT           Redis server port
    --queue QUEUE         Queues to process (Can be specified multiple times)
    --concurrency INT     Processor threads to use
"))

(defun main (&rest args)
  (when (equalp args '("--help"))
    (print-usage)
    (uiop:quit -1))

  (vom:config t :info)
  (let ((args (parse-args args)))
    (redqing.worker:wait-for-processors (apply #'redqing.worker:run args))))
