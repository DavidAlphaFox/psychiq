#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(ql:quickload '(:redqing :trivial-signal :uiop) :silent t)

(defun print-usage ()
  (format *error-output* "~&Usage: redqing [option...]

Options:
    -o, --host HOST           Redis server host
    -p, --port PORT           Redis server port
    -q, --queue QUEUE         Queues to process (Can be specified multiple times)
    -c, --concurrency INT     Processor threads to use
    -s, --system SYSTEM       ASDF system to load before starting
    -h, --help                Show help
")
  (uiop:quit -1))

(defmacro case-option (keyform &body cases)
  (let ((g-keyform (gensym "KEYFORM")))
    `(let ((,g-keyform ,keyform))
       (cond
         ,@(loop for (case . body) in cases
                 if (eq case 'otherwise)
                   collect `(t ,@body)
                 else
                   collect `((find ,g-keyform ',(if (listp case)
                                                    case
                                                    (list case))
                                   :test #'equal)
                             ,@body))))))

(defun parse-args (args)
  (let (new-args)
    (flet ((add-option (k v)
             (setf new-args (nconc new-args (list k v)))))
      (loop with queues = (list "default")
            with systems = '()
            for option = (pop args)
            while option
            do (case-option option
                 (("-o" "--host")
                  (add-option :host (pop args)))
                 (("-p" "--port")
                  (add-option :port (parse-integer (pop args))))
                 (("-c" "--concurrency")
                  (add-option :concurrency (parse-integer (pop args))))
                 (("-q" "--queue")
                  (push (pop args) queues))
                 (("-s" "--system")
                  (push (pop args) systems))
                 (("-h" "--help")
                  (print-usage))
                 (otherwise
                  (warn "Invalid option: ~A" option)
                  (print-usage)))
            finally
               (when queues
                 (add-option :queue (nreverse queues)))
               (when systems
                 (ql:quickload (nreverse systems)))))
    new-args))

(defmacro with-handle-interrupt (int-handler &body body)
  (let ((main (gensym "MAIN")))
    `(flet ((,main () ,@body))
       #+(or sbcl ccl clisp allegro ecl)
       (handler-case
           (let (#+ccl (ccl:*break-hook* (lambda (condition hook)
                                           (declare (ignore hook))
                                           (error condition))))
             (,main))
         (#+sbcl sb-sys:interactive-interrupt
          #+ccl  ccl:interrupt-signal-condition
          #+clisp system::simple-interrupt-condition
          #+ecl ext:interactive-interrupt
          #+allegro excl:interrupt-signal
          ()
           (funcall ,int-handler)))
       #-(or sbcl ccl clisp allegro ecl)
       (,main))))

(defun main (&rest args)
  (vom:config t :info)
  (let ((args (parse-args args)))
    (format *error-output*
            "~&Starting a worker (concurrency=~A) with Redis (~A:~A)...~%"
            (getf args :concurrency 25)
            (getf args :host "localhost")
            (getf args :port 6379))

    (let ((worker (apply #'redqing.worker:run args)))
      (flet ((handle-sigint (signo)
               (format *error-output*
                       "~&~A~%"
                       (trivial-signal:signal-name signo))
               (redqing.worker:stop worker))
             (handle-sigterm (signo)
               (format *error-output*
                       "~&~A~%"
                       (trivial-signal:signal-name signo))
               (redqing.worker:kill worker)))
        (setf (trivial-signal:signal-handler :term) #'handle-sigterm)
        (setf (trivial-signal:signal-handler :int)  #'handle-sigint)
        (with-handle-interrupt (lambda () (handle-sigint trivial-signal:+sigint+))
          (redqing.worker:wait-for-processors worker))))))
